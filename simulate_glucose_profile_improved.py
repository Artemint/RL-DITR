import torch
import pandas as pd
import json
import matplotlib.pyplot as plt
from pathlib import Path
from datetime import datetime

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ===
PREDICTIONS_PATH = 'results/predictions_full.json'  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
DIABETES_CSV = 'assets/data/diabetes_t1_input.csv'  # –ù–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–±–µ—Ç–∏–∫–∞
SIMULATION_CSV = 'assets/data/diabetes_t1_input_simulation_period.csv'  # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏
SAMPLE_CSV = 'assets/data/sample.csv'  # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ ===
print('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...')
with open(PREDICTIONS_PATH) as f:
    result = json.load(f)

recommendations = result['recommendations']
glucose_profile = result['glucose_profile']
observed_glucose = result.get('observed_glucose', [])

# === 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏ ===
print('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏...')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏
df_simulation = pd.read_csv(SIMULATION_CSV)
df_simulation['datetime'] = pd.to_datetime(df_simulation['datetime'])

# –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–ª—é–∫–æ–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏
real_glucose_sim = df_simulation[df_simulation['key_group'] == 'glu'].copy()
real_glucose_sim = real_glucose_sim.sort_values('datetime')

# –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ–∑—ã –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏
real_insulin_sim = df_simulation[
    (df_simulation['key_group'] == 'insulin') & 
    (df_simulation['key'] == 'insulin')
].copy()
real_insulin_sim = real_insulin_sim.sort_values('datetime')

# –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∏–Ω—Å—É–ª–∏–Ω–∞
real_insulin_types = df_simulation[
    (df_simulation['key_group'] == 'insulin') & 
    (df_simulation['key'] == 'insulin_group')
].copy()
real_insulin_types = real_insulin_types.sort_values('datetime')

print(f"üìä –†–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –≥–ª—é–∫–æ–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏: {len(real_glucose_sim)}")
print(f"üìä –†–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—ä–µ–∫—Ü–∏–π –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏: {len(real_insulin_sim)}")

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–Ω—Å—É–ª–∏–Ω–∞
print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∏–Ω—Å—É–ª–∏–Ω–∞:")
print("–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
for _, row in real_insulin_types.iterrows():
    print(f"  {row['datetime']}: {row['value']}")

# === 3. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ===
# –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ)
if observed_glucose:
    dates_obs = [step['datetime'] for step in observed_glucose]
    glu_obs = [step['observed_glucose'] for step in observed_glucose]
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ datetime
    obs_tuples = sorted(zip(dates_obs, glu_obs), key=lambda x: pd.to_datetime(x[0]))
    dates_obs, glu_obs = zip(*obs_tuples)
    dates_obs, glu_obs = list(dates_obs), list(glu_obs)
else:
    dates_obs, glu_obs = [], []

# === 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ===
# –°–∏–º—É–ª—è—Ü–∏—è (–≤—Å—è —Å–∏–º—É–ª—è—Ü–∏—è)
dates_glu_sim = [step['datetime'] for step in glucose_profile]
glu_pred_sim = [step['predicted_glucose'] for step in glucose_profile]

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
if dates_glu_sim:
    sim_tuples = sorted(zip(dates_glu_sim, glu_pred_sim), key=lambda x: pd.to_datetime(x[0]))
    dates_glu_sim, glu_pred_sim = zip(*sim_tuples)
    dates_glu_sim, glu_pred_sim = list(dates_glu_sim), list(glu_pred_sim)

# –î–æ–∑—ã –ø–æ —Å–∏–º—É–ª—è—Ü–∏–∏ (–≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
dates_dose_sim = [step['datetime'] for step in recommendations]
doses_sim = [step['dose'] for step in recommendations]
if dates_dose_sim:
    dose_sim_tuples = sorted(zip(dates_dose_sim, doses_sim), key=lambda x: pd.to_datetime(x[0]))
    dates_dose_sim, doses_sim = zip(*dose_sim_tuples)
    dates_dose_sim, doses_sim = list(dates_dose_sim), list(doses_sim)

# === 5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
fig = plt.figure(figsize=(16, 8))

# –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
ax1 = fig.add_subplot(111)

# 1. –ò—Å—Ç–æ—Ä–∏—è: —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–ª—é–∫–æ–∑—ã (–¥–æ —Å–∏–º—É–ª—è—Ü–∏–∏)
if dates_obs:
    dates_obs_dt = [pd.to_datetime(dt) for dt in dates_obs]
    ax1.plot(dates_obs_dt, glu_obs, marker='s', linestyle='-', color='green', 
             label='–ì–ª–∏–∫–µ–º–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)', linewidth=2, markersize=6)

# 2. –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏ (–ø—É–Ω–∫—Ç–∏—Ä)
if not real_glucose_sim.empty:
    real_glu_dates = real_glucose_sim['datetime'].tolist()
    real_glu_values = real_glucose_sim['value'].astype(float).tolist()
    ax1.plot(real_glu_dates, real_glu_values, marker='o', linestyle='--', 
             color='darkgreen', label='–ì–ª–∏–∫–µ–º–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏)', 
             linewidth=2, markersize=6, alpha=0.8)

# 3. –°–∏–º—É–ª—è—Ü–∏—è: –ø—Ä–æ–≥–Ω–æ–∑ –≥–ª—é–∫–æ–∑—ã
if dates_glu_sim:
    dates_glu_sim_dt = [pd.to_datetime(dt) for dt in dates_glu_sim]
    ax1.plot(dates_glu_sim_dt, glu_pred_sim, marker='o', linestyle='-', 
             color='blue', label='–ì–ª–∏–∫–µ–º–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)', linewidth=2, markersize=6)

# 4. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–∑—ã –∏–Ω—Å—É–ª–∏–Ω–∞
if dates_dose_sim:
    dates_dose_sim_dt = [pd.to_datetime(dt) for dt in dates_dose_sim]
    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–ª—é–∫–æ–∑—ã –¥–ª—è –¥–æ–∑
    dose_glu_values = []
    for dt in dates_dose_sim:
        if dt in dates_glu_sim:
            dose_glu_values.append(glu_pred_sim[dates_glu_sim.index(dt)])
        else:
            dose_glu_values.append(None)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ—á–∫–∏
    valid_doses = [(dt, dose, glu) for dt, dose, glu in 
                   zip(dates_dose_sim_dt, doses_sim, dose_glu_values) if glu is not None]
    if valid_doses:
        valid_dates, valid_doses_list, valid_glu = zip(*valid_doses)
        ax1.scatter(valid_dates, valid_glu, color='red', marker='x', s=120, 
                   label='–í–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Å—É–ª–∏–Ω–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏)', linewidth=2)
        for dt, dose in zip(valid_dates, valid_doses_list):
            ax1.annotate(f'{dose}', (dt, valid_glu[valid_dates.index(dt)]), 
                        textcoords="offset points", xytext=(0,10), ha='center', 
                        color='red', fontweight='bold')

# –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è ‚Äî –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Å–∏–º—É–ª—è—Ü–∏–µ–π
if dates_obs and dates_glu_sim:
    start_simulation = pd.to_datetime('2022-01-17 00:00:00')
    ax1.axvline(x=start_simulation, color='gray', linestyle='--', 
                label='–°—Ç–∞—Ä—Ç —Å–∏–º—É–ª—è—Ü–∏–∏', linewidth=2)

# –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
ax1.axhline(y=3.9, color='lightgray', linestyle=':', alpha=0.7, label='–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º—ã (3.9)')
ax1.axhline(y=10.0, color='lightgray', linestyle=':', alpha=0.7, label='–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º—ã (10.0)')

ax1.set_xlabel('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', fontsize=12)
ax1.set_ylabel('–ì–ª—é–∫–æ–∑–∞ (–º–º–æ–ª—å/–ª)', fontsize=12)
ax1.set_title('–ì–ª–∏–∫–µ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å: –∏—Å—Ç–æ—Ä–∏—è, —Å–∏–º—É–ª—è—Ü–∏—è –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 
              fontsize=14, fontweight='bold')
ax1.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), fontsize=10, ncol=3)
ax1.grid(True, alpha=0.3)
ax1.tick_params(axis='x', rotation=45)

# === –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π ===
if dates_dose_sim and not real_insulin_sim.empty:
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    table_data = []

    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–∑—ã (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∏–Ω—Å—É–ª–∏–Ω–∞)
    for i, (rec_date, rec_dose) in enumerate(zip(dates_dose_sim, doses_sim)):
        rec_dt = pd.to_datetime(rec_date)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–Ω—Å—É–ª–∏–Ω–∞ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        insulin_type = "–ö–æ—Ä–æ—Ç–∫–∏–π"
        for rec in recommendations:
            if rec['datetime'] == rec_date:
                if rec.get('insulin_type') == 'long':
                    insulin_type = "–î–ª–∏–Ω–Ω—ã–π"
                elif rec.get('insulin_type') == 'medium':
                    insulin_type = "–°—Ä–µ–¥–Ω–∏–π"
                break
        
        table_data.append({
            '–í—Ä–µ–º—è': rec_dt.strftime('%d.%m %H:%M'),
            '–¢–∏–ø': f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ({insulin_type})',
            '–î–æ–∑–∞': f"{rec_dose} –µ–¥.",
            '–î–∞—Ç–∞': rec_dt.date()
        })

    # –†–µ–∞–ª—å–Ω—ã–µ –¥–æ–∑—ã
    for i, (real_date, real_dose) in enumerate(zip(real_insulin_sim['datetime'], real_insulin_sim['value'])):
        real_dt = pd.to_datetime(real_date)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Å—É–ª–∏–Ω–∞
        insulin_type = "–ö–æ—Ä–æ—Ç–∫–∏–π"
        nearby_type = real_insulin_types[
            (real_insulin_types['datetime'] == real_date)
        ]
        if not nearby_type.empty:
            insulin_type_value = nearby_type.iloc[0]['value']
            if insulin_type_value == 'long':
                insulin_type = "–î–ª–∏–Ω–Ω—ã–π"

        table_data.append({
            '–í—Ä–µ–º—è': real_dt.strftime('%d.%m %H:%M'),
            '–¢–∏–ø': f'–†–µ–∞–ª—å–Ω—ã–π ({insulin_type})',
            '–î–æ–∑–∞': f"{real_dose} –µ–¥.",
            '–î–∞—Ç–∞': real_dt.date()
        })

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    table_data.sort(key=lambda x: pd.to_datetime(x['–í—Ä–µ–º—è'], format='%d.%m %H:%M'))

    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    df_table = pd.DataFrame(table_data)
    df_table.to_csv('results/insulin_comparison_table.csv', index=False, encoding='utf-8-sig')
    print(f"üìä –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: results/insulin_comparison_table.csv")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
plt.savefig('results/glucose_profile_visualization_improved.png', dpi=300, bbox_inches='tight')
plt.show()

print('–ì–æ—Ç–æ–≤–æ!')
print('üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: results/glucose_profile_visualization_improved.png')

# === 6. –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ===
print('\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:')
print('=' * 50)

if not real_insulin_sim.empty and dates_dose_sim:
    print('\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ–∑ –∏–Ω—Å—É–ª–∏–Ω–∞:')
    print('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ vs –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    print('-' * 40)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    comparison_data = []
    
    for i, (rec_date, rec_dose) in enumerate(zip(dates_dose_sim, doses_sim)):
        rec_dt = pd.to_datetime(rec_date)
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ä–µ–∞–ª—å–Ω—É—é –¥–æ–∑—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2 —á–∞—Å–æ–≤
        time_diff = pd.Timedelta(hours=2)
        nearby_real = real_insulin_sim[
            (real_insulin_sim['datetime'] >= rec_dt - time_diff) &
            (real_insulin_sim['datetime'] <= rec_dt + time_diff)
        ]
        
        if not nearby_real.empty:
            closest_idx = (nearby_real['datetime'] - rec_dt).abs().idxmin()
            real_dose = nearby_real.loc[closest_idx, 'value']
            real_time = nearby_real.loc[closest_idx, 'datetime']
            time_diff_minutes = abs((real_time - rec_dt).total_seconds() / 60)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞
            nearby_type = real_insulin_types[
                (real_insulin_types['datetime'] == real_time)
            ]
            insulin_type = "–ö–æ—Ä–æ—Ç–∫–∏–π"
            if not nearby_type.empty:
                insulin_type_value = nearby_type.iloc[0]['value']
                if insulin_type_value == 'long':
                    insulin_type = "–î–ª–∏–Ω–Ω—ã–π"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–Ω—Å—É–ª–∏–Ω–∞ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            model_insulin_type = "–ö–æ—Ä–æ—Ç–∫–∏–π"
            for rec in recommendations:
                if rec['datetime'] == rec_date:
                    if rec.get('insulin_type') == 'long':
                        model_insulin_type = "–î–ª–∏–Ω–Ω—ã–π"
                    elif rec.get('insulin_type') == 'medium':
                        model_insulin_type = "–°—Ä–µ–¥–Ω–∏–π"
                    break
            
            comparison_data.append({
                '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è': f"{rec_dt.strftime('%H:%M')} - {rec_dose} –µ–¥. ({model_insulin_type})",
                '–†–µ–∞–ª—å–Ω–∞—è': f"{real_time.strftime('%H:%M')} - {real_dose} –µ–¥. ({insulin_type})",
                '–†–∞–∑–Ω–∏—Ü–∞ –¥–æ–∑': rec_dose - float(real_dose),
                '–í—Ä–µ–º—è (–º–∏–Ω)': time_diff_minutes
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–Ω—Å—É–ª–∏–Ω–∞ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            model_insulin_type = "–ö–æ—Ä–æ—Ç–∫–∏–π"
            for rec in recommendations:
                if rec['datetime'] == rec_date:
                    if rec.get('insulin_type') == 'long':
                        model_insulin_type = "–î–ª–∏–Ω–Ω—ã–π"
                    elif rec.get('insulin_type') == 'medium':
                        model_insulin_type = "–°—Ä–µ–¥–Ω–∏–π"
                    break
            
            print(f"–ú–æ–¥–µ–ª—å: {rec_dt.strftime('%H:%M')} - {rec_dose} –µ–¥. ({model_insulin_type})")
            print(f"–†–µ–∞–ª—å–Ω–æ: {real_time.strftime('%H:%M')} - {real_dose} –µ–¥. ({insulin_type})")
            print(f"–†–∞–∑–Ω–∏—Ü–∞: {rec_dose - float(real_dose)} –µ–¥. (–≤—Ä–µ–º—è: {time_diff_minutes:.0f} –º–∏–Ω)")
            print()
    
    if comparison_data:
        df_comparison = pd.DataFrame(comparison_data)
        avg_dose_diff = df_comparison['–†–∞–∑–Ω–∏—Ü–∞ –¥–æ–∑'].mean()
        avg_time_diff = df_comparison['–í—Ä–µ–º—è (–º–∏–Ω)'].mean()
        
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
        print(f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–æ–∑–∞—Ö: {avg_dose_diff:.1f} –µ–¥.")
        print(f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {avg_time_diff:.0f} –º–∏–Ω")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(comparison_data)}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
if 'comparison_data' in locals() and comparison_data:
    comparison_report = {
        'comparison_data': comparison_data,
        'statistics': {
            'avg_dose_diff': avg_dose_diff,
            'avg_time_diff': avg_time_diff,
            'total_comparisons': len(comparison_data)
        }
    }
    
    with open('results/comparison_report_improved.json', 'w', encoding='utf-8') as f:
        json.dump(comparison_report, f, indent=2, default=str, ensure_ascii=False)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: results/comparison_report_improved.json") 