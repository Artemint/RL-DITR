import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import os

def create_sparse_4day_with_insulin():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–π 4-–¥–Ω–µ–≤–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å –∏–Ω—Å—É–ª–∏–Ω–æ–º"""
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑—Ä—è–∂–µ–Ω–Ω–æ–≥–æ 4-–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –∏–Ω—Å—É–ª–∏–Ω–æ–º...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    patient_data = load_patient_data()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ mySugr
    mysugr_df = pd.read_csv('assets/data/D_1_type/mysugr_data/2022_01_09-2022_04_25_export.csv')
    mysugr_df['datetime'] = pd.to_datetime(mysugr_df['Date'] + ' ' + mysugr_df['Time'])
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ reader
    reader_files = [
        'assets/data/D_1_type/reader_data/2022_04_20-2022_04_25_export.csv',
        'assets/data/D_1_type/reader_data/2022_04_03-2022_04_20_export.csv',
        'assets/data/D_1_type/reader_data/2022_03_19-2022_04_03_export.csv',
        'assets/data/D_1_type/reader_data/2022_03_05-2022_03_19_export.csv',
        'assets/data/D_1_type/reader_data/2022_02_16-2022_03_05_export.csv',
        'assets/data/D_1_type/reader_data/2022_02_06-2022_02_16_export.csv',
        'assets/data/D_1_type/reader_data/2022_01_26-2022_02_06_export.csv',
        'assets/data/D_1_type/reader_data/2022_01_15-2022_01_26_export.csv',
        'assets/data/D_1_type/reader_data/2022_01_06-2022_01_15_export.csv'
    ]
    
    all_reader_data = []
    for file in reader_files:
        if os.path.exists(file):
            df = pd.read_csv(file, sep='\t')
            df['datetime'] = pd.to_datetime(df['Time'])
            all_reader_data.append(df)
    
    reader_df = pd.concat(all_reader_data, ignore_index=True) if all_reader_data else None
    
    # –ù–∞—Ö–æ–¥–∏–º 4 –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –¥–Ω—è —Å –∏–Ω—Å—É–ª–∏–Ω–æ–º
    # –ò–∑ –∞–Ω–∞–ª–∏–∑–∞: 2022-01-13, 2022-01-14, 2022-01-15, 2022-01-16
    start_date = pd.to_datetime('2022-01-13')
    end_date = pd.to_datetime('2022-01-16')
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.date()} - {end_date.date()}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    input_data = []
    row_id = 0
    
    # 1. –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–ê–¶–ò–ï–ù–¢–ê (–≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ)
    base_date = start_date.replace(hour=0, minute=0)  # –ù–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
    
    # –í–æ–∑—Ä–∞—Å—Ç
    input_data.append({
        'datetime': base_date.strftime('%Y-%m-%d %H:%M'),
        'key_type': 'cont',
        'key_group': 'base',
        'key': 'age',
        'value': 35
    })
    row_id += 1
    
    # –ü–æ–ª
    input_data.append({
        'datetime': base_date.strftime('%Y-%m-%d %H:%M'),
        'key_type': 'cat2(M,F)',
        'key_group': 'base',
        'key': 'gender',
        'value': 'M'
    })
    row_id += 1
    
    # –î–∞–≤–ª–µ–Ω–∏–µ
    input_data.append({
        'datetime': base_date.strftime('%Y-%m-%d %H:%M'),
        'key_type': 'cont',
        'key_group': 'base',
        'key': 'DBP',
        'value': 75
    })
    row_id += 1
    
    input_data.append({
        'datetime': base_date.strftime('%Y-%m-%d %H:%M'),
        'key_type': 'cont',
        'key_group': 'base',
        'key': 'SBP',
        'value': 120
    })
    row_id += 1
    
    # –ß–∞—Å—Ç–æ—Ç–∞ –¥—ã—Ö–∞–Ω–∏—è
    input_data.append({
        'datetime': base_date.strftime('%Y-%m-%d %H:%M'),
        'key_type': 'cont',
        'key_group': 'base',
        'key': 'RR',
        'value': 18
    })
    row_id += 1
    
    # –†–æ—Å—Ç –∏ –≤–µ—Å –∏–∑ patient_data
    if 'height_cm' in patient_data:
        input_data.append({
            'datetime': base_date.strftime('%Y-%m-%d %H:%M'),
            'key_type': 'cont',
            'key_group': 'base',
            'key': 'height',
            'value': patient_data['height_cm']
        })
        row_id += 1
    
    if 'weight_kg' in patient_data:
        input_data.append({
            'datetime': base_date.strftime('%Y-%m-%d %H:%M'),
            'key_type': 'cont',
            'key_group': 'base',
            'key': 'weight',
            'value': patient_data['weight_kg']
        })
        row_id += 1
    
    # BMI
    if 'height_cm' in patient_data and 'weight_kg' in patient_data:
        height_m = patient_data['height_cm'] / 100
        bmi = patient_data['weight_kg'] / (height_m ** 2)
        input_data.append({
            'datetime': base_date.strftime('%Y-%m-%d %H:%M'),
            'key_type': 'cont',
            'key_group': 'base',
            'key': 'BMI',
            'value': round(bmi, 2)
        })
        row_id += 1
    
    # 2. –î–ò–ê–ì–ù–û–ó (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    input_data.append({
        'datetime': base_date.strftime('%Y-%m-%d %H:%M'),
        'key_type': 'cat2',
        'key_group': 'diag',
        'key': 'Type 1 diabetes',
        'value': 1
    })
    row_id += 1
    
    # 3. –í–†–ï–ú–ï–ù–ù–û–ô –†–Ø–î (—Ä–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–ª—é–∫–æ–∑—ã –∏ –∏–Ω—Å—É–ª–∏–Ω–∞)
    
    # –ö–ª—é—á–µ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞–∑—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–µ –±–æ–ª–µ–µ 20 –≤ –¥–µ–Ω—å)
    key_times = [
        '06:00', '08:00', '10:00', '12:00', '14:00', 
        '16:00', '18:00', '20:00', '22:00', '00:00'
    ]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    for day_offset in range(4):
        current_date = start_date + timedelta(days=day_offset)
        day_str = current_date.strftime('%Y-%m-%d')
        
        print(f"\nüìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è: {day_str}")
        
        # –ì–ª—é–∫–æ–∑–∞ –∏–∑ reader
        if reader_df is not None:
            day_reader = reader_df[
                (reader_df['datetime'].dt.date == current_date.date()) & 
                (reader_df['Scan Glucose (mmol/L)'].notna())
            ].copy()
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            day_reader = day_reader.drop_duplicates(subset=['datetime', 'Scan Glucose (mmol/L)'])
            
            print(f"  üìä –ò–∑–º–µ—Ä–µ–Ω–∏–π –≥–ª—é–∫–æ–∑—ã: {len(day_reader)}")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ (–Ω–µ –±–æ–ª–µ–µ 10 –≤ –¥–µ–Ω—å)
            selected_glucose = []
            
            for time_str in key_times:
                # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∫ –∫–ª—é—á–µ–≤–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                time_obj = datetime.strptime(time_str, '%H:%M').time()
                target_datetime = current_date.replace(hour=time_obj.hour, minute=time_obj.minute)
                
                # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2 —á–∞—Å–æ–≤
                time_diff = pd.Timedelta(hours=2)
                nearby_measurements = day_reader[
                    (day_reader['datetime'] >= target_datetime - time_diff) &
                    (day_reader['datetime'] <= target_datetime + time_diff)
                ]
                
                if len(nearby_measurements) > 0:
                    # –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
                    closest_idx = (nearby_measurements['datetime'] - target_datetime).abs().idxmin()
                    closest_measurement = nearby_measurements.loc[closest_idx]
                    selected_glucose.append(closest_measurement)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≥–ª—é–∫–æ–∑—ã
            for row in selected_glucose:
                input_data.append({
                    'datetime': row['datetime'].strftime('%Y-%m-%d %H:%M'),
                    'key_type': 'cont',
                    'key_group': 'glu',
                    'key': 'glu',
                    'value': row['Scan Glucose (mmol/L)']
                })
                row_id += 1
        
        # –ò–Ω—Å—É–ª–∏–Ω –∏–∑ mySugr
        if mysugr_df is not None:
            day_mysugr = mysugr_df[
                (mysugr_df['datetime'].dt.date == current_date.date())
            ]
            
            print(f"  üìä –ó–∞–ø–∏—Å–µ–π mySugr: {len(day_mysugr)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–Ω—ä–µ–∫—Ü–∏–∏ –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            for _, row in day_mysugr.iterrows():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Å—É–ª–∏–Ω–∞
                insulin_type = 'rapid'
                if pd.notna(row['Basal Injection Units']):
                    insulin_type = 'long'
                elif pd.notna(row['Insulin (Meal)']):
                    insulin_type = 'rapid'
                elif pd.notna(row['Insulin (Correction)']):
                    insulin_type = 'rapid'
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∑—É –∏–Ω—Å—É–ª–∏–Ω–∞
                if pd.notna(row['Basal Injection Units']):
                    input_data.append({
                        'datetime': row['datetime'].strftime('%Y-%m-%d %H:%M'),
                        'key_type': 'cat2',
                        'key_group': 'insulin',
                        'key': 'insulin',
                        'value': row['Basal Injection Units']
                    })
                    row_id += 1
                    
                    input_data.append({
                        'datetime': row['datetime'].strftime('%Y-%m-%d %H:%M'),
                        'key_type': 'cat6(na,medium,short,rapid,long,premixed)',
                        'key_group': 'insulin',
                        'key': 'insulin_group',
                        'value': insulin_type
                    })
                    row_id += 1
                
                if pd.notna(row['Insulin (Meal)']):
                    input_data.append({
                        'datetime': row['datetime'].strftime('%Y-%m-%d %H:%M'),
                        'key_type': 'cat2',
                        'key_group': 'insulin',
                        'key': 'insulin',
                        'value': row['Insulin (Meal)']
                    })
                    row_id += 1
                    
                    input_data.append({
                        'datetime': row['datetime'].strftime('%Y-%m-%d %H:%M'),
                        'key_type': 'cat6(na,medium,short,rapid,long,premixed)',
                        'key_group': 'insulin',
                        'key': 'insulin_group',
                        'value': insulin_type
                    })
                    row_id += 1
                
                if pd.notna(row['Insulin (Correction)']):
                    input_data.append({
                        'datetime': row['datetime'].strftime('%Y-%m-%d %H:%M'),
                        'key_type': 'cat2',
                        'key_group': 'insulin',
                        'key': 'insulin',
                        'value': row['Insulin (Correction)']
                    })
                    row_id += 1
                    
                    input_data.append({
                        'datetime': row['datetime'].strftime('%Y-%m-%d %H:%M'),
                        'key_type': 'cat6(na,medium,short,rapid,long,premixed)',
                        'key_group': 'insulin',
                        'key': 'insulin_group',
                        'value': insulin_type
                    })
                    row_id += 1
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(input_data)
    df = df.sort_values('datetime')
    df = df.reset_index(drop=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    output_path = 'assets/data/diabetes_t1_input_sparse_4days_insulin.csv'
    df.to_csv(output_path, index=False)
    
    print(f"\n‚úÖ –†–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–π 4-–¥–Ω–µ–≤–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å –∏–Ω—Å—É–ª–∏–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    base_count = len(df[df['key_group'] == 'base'])
    diag_count = len(df[df['key_group'] == 'diag'])
    glu_count = len(df[df['key_group'] == 'glu'])
    insulin_count = len(df[df['key_group'] == 'insulin'])
    
    print(f"üë§ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {base_count}")
    print(f"üè• –î–∏–∞–≥–Ω–æ–∑—ã: {diag_count}")
    print(f"ü©∏ –ò–∑–º–µ—Ä–µ–Ω–∏—è –≥–ª—é–∫–æ–∑—ã: {glu_count}")
    print(f"üíâ –ó–∞–ø–∏—Å–∏ –∏–Ω—Å—É–ª–∏–Ω–∞: {insulin_count}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º
    df['datetime'] = pd.to_datetime(df['datetime'])
    df['date'] = df['datetime'].dt.date
    daily_stats = df.groupby('date').agg({
        'key_group': 'count'
    })
    
    print(f"\nüìã –ó–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º:")
    for date, count in daily_stats.iterrows():
        print(f"  {date}: {count['key_group']} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑—Ä—è–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:")
    print("–ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):")
    base_first = df[df['key_group'] == 'base'].head()
    for _, row in base_first.iterrows():
        print(f"  {row['datetime']} | {row['key_group']} | {row['key']} | {row['value']}")
    
    print("\n–ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞:")
    time_first = df[df['key_group'].isin(['glu', 'insulin'])].head(15)
    for _, row in time_first.iterrows():
        print(f"  {row['datetime']} | {row['key_group']} | {row['key']} | {row['value']}")
    
    return output_path

def load_patient_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    print("=== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–ê–¶–ò–ï–ù–¢–ê ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ—Å–∞
    weight_file = 'assets/data/D_1_type/fitbit_data/2022_04_25_all_time_export/Personal & Account/weight-2021-11-28.json'
    height_file = 'assets/data/D_1_type/fitbit_data/2022_04_25_all_time_export/Personal & Account/height-2021-11-28.json'
    
    patient_data = {}
    
    if os.path.exists(weight_file):
        with open(weight_file, 'r') as f:
            weight_data = json.load(f)
            if weight_data:
                weight_lbs = weight_data[0]['weight']  # –í–µ—Å –≤ —Ñ—É–Ω—Ç–∞—Ö
                weight_kg = weight_lbs * 0.453592  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∫–≥
                patient_data['weight_lbs'] = weight_lbs
                patient_data['weight_kg'] = weight_kg
                patient_data['bmi_from_fitbit'] = weight_data[0]['bmi']
                patient_data['weight_date'] = weight_data[0]['date']
                print(f"–í–µ—Å –∏–∑ Fitbit: {weight_lbs} —Ñ—É–Ω—Ç–æ–≤ = {weight_kg:.1f} –∫–≥ (–¥–∞—Ç–∞: {patient_data['weight_date']})")
                print(f"BMI –∏–∑ Fitbit: {patient_data['bmi_from_fitbit']}")
    
    if os.path.exists(height_file):
        with open(height_file, 'r') as f:
            height_data = json.load(f)
            if height_data:
                height_mm = int(height_data[0]['value'])
                patient_data['height_cm'] = height_mm / 10
                patient_data['height_date'] = height_data[0]['dateTime']
                print(f"–†–æ—Å—Ç –∏–∑ Fitbit: {patient_data['height_cm']} —Å–º (–¥–∞—Ç–∞: {patient_data['height_date']})")
    
    return patient_data

if __name__ == "__main__":
    dataset_file = create_sparse_4day_with_insulin()
    print(f"\nüéØ –ì–æ—Ç–æ–≤–æ! –†–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–π 4-–¥–Ω–µ–≤–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å –∏–Ω—Å—É–ª–∏–Ω–æ–º: {dataset_file}") 