#!/usr/bin/env python3


import torch
import pandas as pd
import json
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path
from datetime import datetime, timedelta
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import seaborn as sns

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ===
DIABETES_CSV = 'assets/data/diabetes_t1_input.csv'
SIMULATION_CSV = 'assets/data/diabetes_t1_input_simulation_period.csv'
VALIDATION_PERIOD = '2022-01-17'
VALIDATION_DAYS = 2

class ModelValidatorFixed:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–∏ RL-DITR"""
    
    def __init__(self):
        self.model = None
        self.df_validation = None
        self.real_glucose = None
        self.real_insulin = None
        self.simulated_glucose = None
        self.validation_metrics = {}
        
    def load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å RL-DITR"""
        print("üîß –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        
        try:
            from ts.arm import Model
            model_dir = Path('assets/models/weights')
            df_meta_path = 'assets/models/features.csv'
            
            self.model = Model(model_dir, df_meta_path, beam_size=1)
            print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def load_validation_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏
        df_simulation = pd.read_csv(SIMULATION_CSV)
        df_simulation['datetime'] = pd.to_datetime(df_simulation['datetime'])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        start_date = pd.to_datetime(VALIDATION_PERIOD)
        end_date = start_date + timedelta(days=VALIDATION_DAYS)
        
        self.df_validation = df_simulation[
            (df_simulation['datetime'] >= start_date) &
            (df_simulation['datetime'] < end_date)
        ].copy()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–ª—é–∫–æ–∑—ã
        self.real_glucose = self.df_validation[
            self.df_validation['key_group'] == 'glu'
        ].copy().sort_values('datetime')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ–∑—ã –∏–Ω—Å—É–ª–∏–Ω–∞
        self.real_insulin = self.df_validation[
            (self.df_validation['key_group'] == 'insulin') & 
            (self.df_validation['key'] == 'insulin')
        ].copy().sort_values('datetime')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∏–Ω—Å—É–ª–∏–Ω–∞
        self.real_insulin_types = self.df_validation[
            (self.df_validation['key_group'] == 'insulin') & 
            (self.df_validation['key'] == 'insulin_group')
        ].copy().sort_values('datetime')
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.real_glucose)} –∏–∑–º–µ—Ä–µ–Ω–∏–π –≥–ª—é–∫–æ–∑—ã")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.real_insulin)} –∏–Ω—ä–µ–∫—Ü–∏–π –∏–Ω—Å—É–ª–∏–Ω–∞")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {start_date} - {end_date}")
        print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–∞–ª—å–Ω–æ–π –≥–ª—é–∫–æ–∑—ã: {self.real_glucose['value'].astype(float).min():.1f} - {self.real_glucose['value'].astype(float).max():.1f} –º–º–æ–ª—å/–ª")
        
        return len(self.real_glucose) > 0 and len(self.real_insulin) > 0
    
    def create_validation_input(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–æ–∑–∞–º–∏ –∏–Ω—Å—É–ª–∏–Ω–∞"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df_input = pd.read_csv(DIABETES_CSV)
        df_input['datetime'] = pd.to_datetime(df_input['datetime'])
        
        # –ó–∞–º–µ–Ω—è–µ–º –¥–æ–∑—ã –∏–Ω—Å—É–ª–∏–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑ –ø–µ—Ä–∏–æ–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_start = pd.to_datetime(VALIDATION_PERIOD)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–æ–∑—ã –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        df_input = df_input[
            ~((df_input['key_group'] == 'insulin') & 
              (df_input['datetime'] >= validation_start))
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ–∑—ã –∏–Ω—Å—É–ª–∏–Ω–∞
        real_insulin_data = []
        for _, row in self.real_insulin.iterrows():
            real_insulin_data.append({
                'datetime': row['datetime'],
                'key_group': 'insulin',
                'key': 'insulin',
                'value': row['value'],
                'key_type': 'cont'
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∏–Ω—Å—É–ª–∏–Ω–∞
            nearby_type = self.real_insulin_types[
                self.real_insulin_types['datetime'] == row['datetime']
            ]
            if not nearby_type.empty:
                insulin_type = nearby_type.iloc[0]['value']
                real_insulin_data.append({
                    'datetime': row['datetime'],
                    'key_group': 'insulin',
                    'key': 'insulin_group',
                    'value': insulin_type,
                    'key_type': 'cat2'
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω–µ—Ü
        df_real_insulin = pd.DataFrame(real_insulin_data)
        df_input = pd.concat([df_input, df_real_insulin], ignore_index=True)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df_input = df_input.sort_values('datetime')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_input_path = 'assets/data/diabetes_t1_input_validation_fixed.csv'
        df_input.to_csv(validation_input_path, index=False)
        
        print(f"‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {validation_input_path}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ: {len(df_input)}")
        print(f"üìä –ò–Ω—Å—É–ª–∏–Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(df_input[df_input['key_group'] == 'insulin'])}")
        
        return validation_input_path
    
    def run_validation_simulation(self, input_path):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–æ–∑–∞–º–∏ –∏–Ω—Å—É–ª–∏–Ω–∞"""
        print("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–æ–∑–∞–º–∏
            result = self.model.predict(
                df=input_path,
                scheme='validation',
                start_time=VALIDATION_PERIOD,
                days=VALIDATION_DAYS
            )
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:")
            print(f"   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(result.get('recommendations', []))}")
            print(f"   - –ü—Ä–æ—Ñ–∏–ª—å –≥–ª—é–∫–æ–∑—ã: {len(result.get('glucose_profile', []))}")
            print(f"   - –ù–∞–±–ª—é–¥–∞–µ–º–∞—è –≥–ª—é–∫–æ–∑–∞: {len(result.get('observed_glucose', []))}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–ª—é–∫–æ–∑—É
            self.simulated_glucose = []
            glucose_profile = result.get('glucose_profile', [])
            
            for step in glucose_profile:
                if isinstance(step, dict) and 'predicted_glucose' in step:
                    self.simulated_glucose.append({
                        'datetime': step['datetime'],
                        'predicted_glucose': step['predicted_glucose']
                    })
            
            print(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(self.simulated_glucose)} —Ç–æ—á–µ–∫")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª—é–∫–æ–∑–µ
            if self.simulated_glucose:
                sim_values = [s['predicted_glucose'] for s in self.simulated_glucose]
                print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª—é–∫–æ–∑—ã: {min(sim_values):.1f} - {max(sim_values):.1f} –º–º–æ–ª—å/–ª")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def align_data_for_comparison(self):
        """–í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        print("üîß –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
        
        if not self.simulated_glucose:
            print("‚ùå –ù–µ—Ç —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        df_sim = pd.DataFrame(self.simulated_glucose)
        df_sim['datetime'] = pd.to_datetime(df_sim['datetime'])
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        df_real = self.real_glucose[['datetime', 'value']].copy()
        df_real.columns = ['datetime', 'real_glucose']
        df_real['real_glucose'] = df_real['real_glucose'].astype(float)
        
        print(f"üìä –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫: {len(df_sim)}")
        print(f"üìä –†–µ–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫: {len(df_real)}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        merged_data = []
        
        for _, sim_row in df_sim.iterrows():
            sim_time = sim_row['datetime']
            sim_glucose = sim_row['predicted_glucose']
            
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 30 –º–∏–Ω—É—Ç
            time_diff = pd.Timedelta(minutes=30)
            nearby_real = df_real[
                (df_real['datetime'] >= sim_time - time_diff) &
                (df_real['datetime'] <= sim_time + time_diff)
            ]
            
            if not nearby_real.empty:
                closest_idx = (nearby_real['datetime'] - sim_time).abs().idxmin()
                real_glucose = nearby_real.loc[closest_idx, 'real_glucose']
                real_time = nearby_real.loc[closest_idx, 'datetime']
                time_diff_minutes = abs((real_time - sim_time).total_seconds() / 60)
                
                merged_data.append({
                    'datetime': sim_time,
                    'simulated_glucose': sim_glucose,
                    'real_glucose': real_glucose,
                    'time_diff_minutes': time_diff_minutes
                })
                
                print(f"üîó –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {sim_time} (—Å–∏–º: {sim_glucose:.1f}) - {real_time} (—Ä–µ–∞–ª: {real_glucose:.1f}) [—Ä–∞–∑–Ω–∏—Ü–∞: {time_diff_minutes:.0f} –º–∏–Ω]")
        
        self.comparison_data = pd.DataFrame(merged_data)
        
        print(f"‚úÖ –í—ã—Ä–∞–≤–Ω–µ–Ω–æ {len(self.comparison_data)} —Ç–æ—á–µ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        if len(self.comparison_data) > 0:
            print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–∞–ª—å–Ω–æ–π –≥–ª—é–∫–æ–∑—ã –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {self.comparison_data['real_glucose'].min():.1f} - {self.comparison_data['real_glucose'].max():.1f}")
            print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª—é–∫–æ–∑—ã: {self.comparison_data['simulated_glucose'].min():.1f} - {self.comparison_data['simulated_glucose'].max():.1f}")
        
        return len(self.comparison_data) > 0
    
    def calculate_validation_metrics(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("üìä –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        if self.comparison_data.empty:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        print(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   - –†–µ–∞–ª—å–Ω–∞—è –≥–ª—é–∫–æ–∑–∞: {self.comparison_data['real_glucose'].describe()}")
        print(f"   - –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–ª—é–∫–æ–∑–∞: {self.comparison_data['simulated_glucose'].describe()}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        mae = mean_absolute_error(
            self.comparison_data['real_glucose'], 
            self.comparison_data['simulated_glucose']
        )
        
        mse = mean_squared_error(
            self.comparison_data['real_glucose'], 
            self.comparison_data['simulated_glucose']
        )
        
        rmse = np.sqrt(mse)
        
        r2 = r2_score(
            self.comparison_data['real_glucose'], 
            self.comparison_data['simulated_glucose']
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        mean_absolute_percentage_error = np.mean(
            np.abs((self.comparison_data['real_glucose'] - self.comparison_data['simulated_glucose']) / 
                   self.comparison_data['real_glucose']) * 100
        )
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –≥–ª—é–∫–æ–∑—ã
        self.comparison_data['glucose_range'] = pd.cut(
            self.comparison_data['real_glucose'],
            bins=[0, 3.9, 10.0, 15.0, 30.0],
            labels=['–ì–∏–ø–æ–≥–ª–∏–∫–µ–º–∏—è', '–ù–æ—Ä–º–∞', '–ì–∏–ø–µ—Ä–≥–ª–∏–∫–µ–º–∏—è', '–í—ã—Å–æ–∫–∞—è –≥–∏–ø–µ—Ä–≥–ª–∏–∫–µ–º–∏—è']
        )
        
        range_metrics = {}
        for range_name in self.comparison_data['glucose_range'].unique():
            if pd.notna(range_name):
                range_data = self.comparison_data[
                    self.comparison_data['glucose_range'] == range_name
                ]
                if len(range_data) > 0:
                    range_mae = mean_absolute_error(
                        range_data['real_glucose'], 
                        range_data['simulated_glucose']
                    )
                    range_metrics[range_name] = {
                        'count': len(range_data),
                        'mae': range_mae
                    }
        
        self.validation_metrics = {
            'mae': mae,
            'mse': mse,
            'rmse': rmse,
            'r2': r2,
            'mape': mean_absolute_percentage_error,
            'total_points': len(self.comparison_data),
            'range_metrics': range_metrics
        }
        
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω—ã")
    
    def visualize_validation_results(self):
        """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        ax1.plot(self.comparison_data['datetime'], self.comparison_data['real_glucose'], 
                'o-', color='blue', label='–†–µ–∞–ª—å–Ω–∞—è –≥–ª—é–∫–æ–∑–∞', linewidth=2, markersize=6)
        ax1.plot(self.comparison_data['datetime'], self.comparison_data['simulated_glucose'], 
                's-', color='red', label='–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–ª—é–∫–æ–∑–∞', linewidth=2, markersize=6)
        ax1.axhline(y=3.9, color='lightgray', linestyle=':', alpha=0.7, label='–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º—ã')
        ax1.axhline(y=10.0, color='lightgray', linestyle=':', alpha=0.7, label='–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º—ã')
        ax1.set_ylabel('–ì–ª—é–∫–æ–∑–∞ (–º–º–æ–ª—å/–ª)')
        ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∏ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª—é–∫–æ–∑—ã')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        ax1.tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è
        ax2.scatter(self.comparison_data['real_glucose'], self.comparison_data['simulated_glucose'], 
                   alpha=0.6, color='green')
        
        # –õ–∏–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        min_val = min(self.comparison_data['real_glucose'].min(), self.comparison_data['simulated_glucose'].min())
        max_val = max(self.comparison_data['real_glucose'].max(), self.comparison_data['simulated_glucose'].max())
        ax2.plot([min_val, max_val], [min_val, max_val], 'r--', alpha=0.8, label='–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ')
        
        ax2.set_xlabel('–†–µ–∞–ª—å–Ω–∞—è –≥–ª—é–∫–æ–∑–∞ (–º–º–æ–ª—å/–ª)')
        ax2.set_ylabel('–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–ª—é–∫–æ–∑–∞ (–º–º–æ–ª—å/–ª)')
        ax2.set_title(f'–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è (R¬≤ = {self.validation_metrics["r2"]:.3f})')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
        errors = self.comparison_data['simulated_glucose'] - self.comparison_data['real_glucose']
        ax3.hist(errors, bins=20, alpha=0.7, color='orange', edgecolor='black')
        ax3.axvline(x=0, color='red', linestyle='--', alpha=0.8, label='–ù–µ—Ç –æ—à–∏–±–∫–∏')
        ax3.set_xlabel('–û—à–∏–±–∫–∞ (–º–º–æ–ª—å/–ª)')
        ax3.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        ax3.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ (MAE = {self.validation_metrics["mae"]:.2f})')
        ax3.legend()
        ax3.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –≥–ª—é–∫–æ–∑—ã
        if self.validation_metrics['range_metrics']:
            ranges = list(self.validation_metrics['range_metrics'].keys())
            maes = [self.validation_metrics['range_metrics'][r]['mae'] for r in ranges]
            counts = [self.validation_metrics['range_metrics'][r]['count'] for r in ranges]
            
            bars = ax4.bar(ranges, maes, color=['lightcoral', 'lightgreen', 'lightblue', 'lightyellow'])
            ax4.set_xlabel('–î–∏–∞–ø–∞–∑–æ–Ω –≥–ª—é–∫–æ–∑—ã')
            ax4.set_ylabel('MAE (–º–º–æ–ª—å/–ª)')
            ax4.set_title('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –≥–ª—é–∫–æ–∑—ã')
            ax4.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, count in zip(bars, counts):
                height = bar.get_height()
                ax4.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                        f'n={count}', ha='center', va='bottom', fontsize=8)
        
        plt.tight_layout()
        plt.savefig('results/validation_results_fixed.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        print("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: results/validation_results_fixed.png")
    
    def print_validation_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –í–ê–õ–ò–î–ê–¶–ò–ò –ú–û–î–ï–õ–ò RL-DITR (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
        print("="*60)
        
        print(f"\nüìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print(f"   MAE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞): {self.validation_metrics['mae']:.2f} –º–º–æ–ª—å/–ª")
        print(f"   RMSE (—Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞): {self.validation_metrics['rmse']:.2f} –º–º–æ–ª—å/–ª")
        print(f"   R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏): {self.validation_metrics['r2']:.3f}")
        print(f"   MAPE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞): {self.validation_metrics['mape']:.1f}%")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {self.validation_metrics['total_points']}")
        
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –≥–ª—é–∫–æ–∑—ã:")
        for range_name, metrics in self.validation_metrics['range_metrics'].items():
            print(f"   {range_name}: MAE = {metrics['mae']:.2f} –º–º–æ–ª—å/–ª (n={metrics['count']})")
        
        print(f"\nüí° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:")
        if self.validation_metrics['r2'] > 0.8:
            print("   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
        elif self.validation_metrics['r2'] > 0.6:
            print("   ‚úÖ –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
        elif self.validation_metrics['r2'] > 0.4:
            print("   ‚ö†Ô∏è  –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
        else:
            print("   ‚ùå –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
        
        print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: results/validation_report_fixed.json")
    
    def save_validation_report(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        report = {
            'validation_period': {
                'start_date': VALIDATION_PERIOD,
                'days': VALIDATION_DAYS
            },
            'data_summary': {
                'real_glucose_points': len(self.real_glucose),
                'real_insulin_injections': len(self.real_insulin),
                'comparison_points': len(self.comparison_data)
            },
            'metrics': self.validation_metrics,
            'comparison_data': self.comparison_data.to_dict('records')
        }
        
        with open('results/validation_report_fixed.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, default=str, ensure_ascii=False)
    
    def run_full_validation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–æ–¥–µ–ª–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ RL-DITR (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
        print("="*60)
        
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        if not self.load_model():
            return False
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if not self.load_validation_data():
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            return False
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        input_path = self.create_validation_input()
        
        # 4. –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        if not self.run_validation_simulation(input_path):
            return False
        
        # 5. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not self.align_data_for_comparison():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Ä–æ–≤–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return False
        
        # 6. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        self.calculate_validation_metrics()
        
        # 7. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        self.visualize_validation_results()
        
        # 8. –û—Ç—á–µ—Ç
        self.print_validation_report()
        self.save_validation_report()
        
        print("\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    validator = ModelValidatorFixed()
    success = validator.run_full_validation()
    
    if success:
        print("\nüéâ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ results/")
    else:
        print("\n‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == '__main__':
    main() 