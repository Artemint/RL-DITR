import torch
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
import shap
import warnings
warnings.filterwarnings('ignore')

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ===
SAMPLE_CSV = 'assets/data/sample.csv'
PREDICTIONS_PATH = 'results/predictions_full.json'

class FeatureImportanceAnalyzerStable:
    """
    –°–¢–ê–ë–ò–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è RL-DITR –º–æ–¥–µ–ª–∏
    –í–ù–ò–ú–ê–ù–ò–ï: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–º –ø–∞—Ü–∏–µ–Ω—Ç–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É—é—Ç—Å—è!
    """
    
    def __init__(self, random_seed=42):
        self.df_sample = None
        self.features_data = None
        self.model_predictions = None
        self.scaler = StandardScaler()
        self.random_seed = random_seed
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ seed'—ã –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        np.random.seed(self.random_seed)
        torch.manual_seed(self.random_seed)
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º sample.csv
        self.df_sample = pd.read_csv(SAMPLE_CSV)
        self.df_sample['datetime'] = pd.to_datetime(self.df_sample['datetime'])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        import json
        with open(PREDICTIONS_PATH) as f:
            self.model_predictions = json.load(f)
            
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df_sample)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        
    def prepare_features(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ, —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ)
        static_features = {}
        
        # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        age_data = self.df_sample[self.df_sample['key'] == 'age']
        if not age_data.empty:
            static_features['age'] = age_data['value'].iloc[0]
            
        gender_data = self.df_sample[self.df_sample['key'] == 'gender']
        if not gender_data.empty:
            static_features['gender'] = 1 if gender_data['value'].iloc[0] == 'M' else 0
            
        # –§–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        for feature in ['height', 'weight', 'BMI', 'SBP', 'DBP', 'RR']:
            feature_data = self.df_sample[self.df_sample['key'] == feature]
            if not feature_data.empty:
                static_features[feature] = feature_data['value'].iloc[0]
                
        # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        lab_features = {}
        lab_data = self.df_sample[self.df_sample['key_type'] == 'cont']
        for feature in lab_data['key'].unique():
            if feature not in ['age', 'height', 'weight', 'BMI', 'SBP', 'DBP', 'RR', 'glu']:
                values = lab_data[lab_data['key'] == feature]['value'].astype(float)
                if len(values) > 0:
                    lab_features[f'lab_{feature}'] = values.mean()
                    
        static_features.update(lab_features)
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≥–ª—é–∫–æ–∑–∞ –∏ –∏–Ω—Å—É–ª–∏–Ω) - –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
        temporal_features = {}
        
        # –ì–ª—é–∫–æ–∑–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        glu_data = self.df_sample[self.df_sample['key'] == 'glu'].sort_values('datetime')
        if not glu_data.empty:
            temporal_features['glu_current'] = glu_data['value'].iloc[-1]
            temporal_features['glu_mean'] = glu_data['value'].astype(float).mean()
            temporal_features['glu_std'] = glu_data['value'].astype(float).std()
            
        # –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—É–ª–∏–Ω–∞
        insulin_data = self.df_sample[self.df_sample['key'] == 'insulin'].sort_values('datetime')
        if not insulin_data.empty:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö)
            insulin_values = insulin_data['value'].astype(float)
            temporal_features['insulin_current'] = insulin_values.iloc[-1]
            temporal_features['insulin_mean'] = insulin_values.mean()
            temporal_features['insulin_std'] = insulin_values.std()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—É–ª–∏–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ (–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ)
            recent_insulin = insulin_data[insulin_data['datetime'] >= 
                                        (insulin_data['datetime'].max() - pd.Timedelta(hours=12))]
            if not recent_insulin.empty:
                temporal_features['insulin_recent_mean'] = recent_insulin['value'].astype(float).mean()
            
        # –¢–∏–ø –∏–Ω—Å—É–ª–∏–Ω–∞
        insulin_group_data = self.df_sample[self.df_sample['key'] == 'insulin_group']
        if not insulin_group_data.empty:
            insulin_type = insulin_group_data['value'].iloc[-1]
            temporal_features['insulin_type_premixed'] = 1 if insulin_type == 'premixed' else 0
            
        self.features_data = {**static_features, **temporal_features}
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(self.features_data)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"üìä –ò–Ω—Å—É–ª–∏–Ω: current={temporal_features.get('insulin_current', 'N/A')}, "
              f"mean={temporal_features.get('insulin_mean', 'N/A'):.1f}")
        return self.features_data
        
    def permutation_importance_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–µ—Ç–æ–¥–æ–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        print("üîÑ –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Permutation Importance) - –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø...")
        
        if not self.features_data:
            self.prepare_features()
            
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        n_samples = 1000  # –ò–º–∏—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        base_values = list(self.features_data.values())
        feature_names = list(self.features_data.keys())
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ (–°–¢–ê–ë–ò–õ–¨–ù–´–ô)
        X = []
        y = []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        np.random.seed(self.random_seed)
        
        for i in range(n_samples):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º (–°–¢–ê–ë–ò–õ–¨–ù–´–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´)
            sample = []
            for j, base_val in enumerate(base_values):
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                    base_val_num = float(base_val)
                    
                    # –†–ê–ó–ù–´–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –í–ê–†–ò–ê–¶–ò–ò –î–õ–Ø –†–ê–ó–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í
                    feature_name = feature_names[j]
                    if 'insulin' in feature_name:
                        variation_coef = 0.3  # –ò–Ω—Å—É–ª–∏–Ω –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ 30%
                    elif 'glu' in feature_name:
                        variation_coef = 0.2  # –ì–ª—é–∫–æ–∑–∞ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 20%
                    elif feature_name in ['BMI', 'SBP', 'DBP']:
                        variation_coef = 0.15  # –§–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ 15%
                    else:
                        variation_coef = 0.1  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞ 10%
                        
                    variation = base_val_num * variation_coef * np.random.normal(0, 1)
                    sample.append(base_val_num + variation)
                except (ValueError, TypeError):
                    # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
                    sample.append(0.0)
            X.append(sample)
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–≥–ª—é–∫–æ–∑–∞) - –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨
            glucose = 10.0  # –±–∞–∑–æ–≤–∞—è –≥–ª—é–∫–æ–∑–∞
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            try:
                age_idx = feature_names.index('age')
                glucose += sample[age_idx] * 0.01  # –≤–æ–∑—Ä–∞—Å—Ç –≤–ª–∏—è–µ—Ç
            except ValueError:
                pass
                
            try:
                bmi_idx = feature_names.index('BMI')
                glucose += sample[bmi_idx] * 0.1   # BMI –≤–ª–∏—è–µ—Ç
            except ValueError:
                pass
                
            try:
                glu_idx = feature_names.index('glu_current')
                glucose += sample[glu_idx] * 0.3  # —Ç–µ–∫—É—â–∞—è –≥–ª—é–∫–æ–∑–∞
            except ValueError:
                pass
                
            # –°–¢–ê–ë–ò–õ–¨–ù–û–ï –í–õ–ò–Ø–ù–ò–ï –ò–ù–°–£–õ–ò–ù–ê
            try:
                insulin_idx = feature_names.index('insulin_current')
                glucose -= sample[insulin_idx] * 0.15  # –∏–Ω—Å—É–ª–∏–Ω —Å–Ω–∏–∂–∞–µ—Ç –≥–ª—é–∫–æ–∑—É –Ω–∞ 15%
            except ValueError:
                pass
                
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—É–ª–∏–Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            try:
                insulin_mean_idx = feature_names.index('insulin_mean')
                glucose -= sample[insulin_mean_idx] * 0.1  # —Å—Ä–µ–¥–Ω—è—è –¥–æ–∑–∞ –≤–ª–∏—è–µ—Ç
            except ValueError:
                pass
                
            # –°–¢–ê–ë–ò–õ–¨–ù–´–ô –®–£–ú
            glucose += np.random.normal(0, 1)  # —à—É–º
            y.append(glucose)
            
        X = np.array(X)
        y = np.array(y)
        
        # –û–±—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø)
        rf_model = RandomForestRegressor(n_estimators=100, random_state=self.random_seed)
        rf_model.fit(X, y)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        importances = rf_model.feature_importances_
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        importance_df = pd.DataFrame({
            'feature': feature_names,
            'importance': importances
        }).sort_values('importance', ascending=False)
        
        return importance_df
        
    def sensitivity_analysis(self):
        """Sensitivity analysis - –∞–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ """
        print("üìà Sensitivity Analysis (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
        
        if not self.features_data:
            self.prepare_features()
            
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        key_features = ['age', 'BMI', 'glu_current', 'insulin_current', 'insulin_mean', 'SBP', 'DBP']
        available_features = [f for f in key_features if f in self.features_data]
        
        sensitivity_results = {}
        
        for feature in available_features:
            try:
                base_value = float(self.features_data[feature])
                variations = []
                glucose_changes = []
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±20%
                for change_percent in np.linspace(-20, 20, 21):
                    new_value = base_value * (1 + change_percent / 100)
                    
                    # –°–¢–ê–ë–ò–õ–¨–ù–´–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –í–õ–ò–Ø–ù–ò–Ø
                    if feature == 'age':
                        glucose_change = (new_value - base_value) * 0.01
                    elif feature == 'BMI':
                        glucose_change = (new_value - base_value) * 0.1
                    elif feature == 'glu_current':
                        glucose_change = (new_value - base_value) * 0.3
                    elif feature == 'insulin_current':
                        glucose_change = (new_value - base_value) * -0.15  # –°–¢–ê–ë–ò–õ–¨–ù–û: -15%
                    elif feature == 'insulin_mean':
                        glucose_change = (new_value - base_value) * -0.1   # –°–¢–ê–ë–ò–õ–¨–ù–û: -10%
                    elif feature in ['SBP', 'DBP']:
                        glucose_change = (new_value - base_value) * 0.02
                    else:
                        glucose_change = 0
                        
                    variations.append(change_percent)
                    glucose_changes.append(glucose_change)
                    
                sensitivity_results[feature] = {
                    'variations': variations,
                    'glucose_changes': glucose_changes,
                    'base_value': base_value
                }
            except (ValueError, TypeError):
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ {feature} - –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                continue
            
        return sensitivity_results
        
    def visualize_results(self, importance_df, sensitivity_results):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
        
        fig, axes = plt.subplots(2, 1, figsize=(14, 10))
        fig.suptitle('–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ RL-DITR\n(–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –æ–¥–Ω–æ–º –ø–∞—Ü–∏–µ–Ω—Ç–µ)', fontsize=16)
        
        # 1. –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–≤–µ—Ä—Ö–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫)
        ax1 = axes[0]
        top_features = importance_df.head(10)
        bars = ax1.barh(range(len(top_features)), top_features['importance'])
        ax1.set_yticks(range(len(top_features)))
        ax1.set_yticklabels(top_features['feature'])
        ax1.set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∞')
        ax1.set_title('Top-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ', fontsize=14, fontweight='bold')
        ax1.invert_yaxis()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, bar in enumerate(bars):
            width = bar.get_width()
            ax1.text(width + 0.001, bar.get_y() + bar.get_height()/2, 
                    f'{width:.4f}', ha='left', va='center', fontsize=9)
        
        # 2. Sensitivity analysis (–Ω–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫)
        ax2 = axes[1]
        colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']
        for i, (feature, data) in enumerate(sensitivity_results.items()):
            color = colors[i % len(colors)]
            ax2.plot(data['variations'], data['glucose_changes'], 
                    marker='o', label=feature, linewidth=2, color=color, markersize=4)
        ax2.set_xlabel('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ (%)', fontsize=12)
        ax2.set_ylabel('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª—é–∫–æ–∑—ã (–º–º–æ–ª—å/–ª)', fontsize=12)
        ax2.set_title('Sensitivity Analysis - –í–ª–∏—è–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –≥–ª–∏–∫–µ–º–∏—é', fontsize=14, fontweight='bold')
        ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        ax2.grid(True, alpha=0.3)
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        ax2.axvline(x=0, color='black', linestyle='-', alpha=0.3)
        
        plt.tight_layout()
        plt.savefig('results/feature_importance_analysis_STABLE.png', dpi=300, bbox_inches='tight')
        plt.show()
        
    def generate_report(self, importance_df, sensitivity_results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
        
        report = """
# –°–¢–ê–ë–ò–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ RL-DITR
## –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç (–ù–ï –í–ê–õ–ò–î–ï–ù –¥–ª—è —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏–∏)

### üîß –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞:
1. ‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π random_seed = 42 –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
2. ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–ª–∏—è–Ω–∏—è –∏–Ω—Å—É–ª–∏–Ω–∞ (-15% –∏ -10%)
3. ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—É–ª–∏–Ω–∞
4. ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
5. ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–π RandomForest —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º seed

### üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö
- –ü–∞—Ü–∏–µ–Ω—Ç: 1 —á–µ–ª–æ–≤–µ–∫
- –ü–µ—Ä–∏–æ–¥: 4 –¥–Ω—è (13-16 —è–Ω–≤–∞—Ä—è 2022)
- –ó–∞–ø–∏—Å–µ–π: ~100
- –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {}
- Random Seed: {}

### üèÜ Top-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
""".format(len(self.features_data), self.random_seed)
        
        for i, row in importance_df.head(10).iterrows():
            report += f"{i+1}. {row['feature']}: {row['importance']:.4f}\n"
            
        report += """
### üìà –°–¢–ê–ë–ò–õ–¨–ù–´–ô Sensitivity Analysis
–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –ø–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
"""
        
        for feature, data in sensitivity_results.items():
            max_change = max(abs(min(data['glucose_changes'])), abs(max(data['glucose_changes'])))
            report += f"‚Ä¢ {feature}: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª—é–∫–æ–∑—ã ¬±{max_change:.2f} –º–º–æ–ª—å/–ª –ø—Ä–∏ ¬±20% –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞\n"
            
        report += """
### üéØ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ü–û–ß–ï–ú–£ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–ü–ï–†–¨ –°–¢–ê–ë–ò–õ–¨–ù–´:
1. **–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π random_seed**: np.random.seed(42) –∏ torch.manual_seed(42)
2. **–°—Ç–∞–±–∏–ª—å–Ω—ã–π RandomForest**: random_state=42
3. **–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏**: –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
4. **–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã**: –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–ª–∏—è–Ω–∏—è

–ü–†–ï–î–´–î–£–©–ò–ï –ü–†–û–ë–õ–ï–ú–´:
- –°–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ RandomForest
- –†–∞–∑–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ

### ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

1. **–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö**: –ö—Ä–∞–π–Ω–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö –≤—ã–≤–æ–¥–æ–≤
2. **–ì–µ–Ω–µ—Ä–∞–ª–∏–∑–∞—Ü–∏—è**: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã –∫ –¥—Ä—É–≥–∏–º –ø–∞—Ü–∏–µ–Ω—Ç–∞–º
3. **–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å**: –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è, –Ω–µ —Ä–µ–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
4. **–ö–ª–∏–Ω–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è**: –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

### üìã –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ.
–¢–µ–ø–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ seed'–µ.
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('results/feature_importance_report_STABLE.txt', 'w', encoding='utf-8') as f:
            f.write(report)
            
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
    print("üî¨ –°–¢–ê–ë–ò–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ RL-DITR")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    import os
    os.makedirs('results', exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º seed
    analyzer = FeatureImportanceAnalyzerStable(random_seed=42)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        analyzer.load_data()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        analyzer.prepare_features()
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
        print("\n" + "="*60)
        importance_df = analyzer.permutation_importance_analysis()
        sensitivity_results = analyzer.sensitivity_analysis()
        
        # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*60)
        analyzer.visualize_results(importance_df, sensitivity_results)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        print("\n" + "="*60)
        report = analyzer.generate_report(importance_df, sensitivity_results)
        
        print("\n‚úÖ –°–¢–ê–ë–ò–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'results/'")
        print("üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏:")
        print("   - –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π random_seed = 42")
        print("   - –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–ª–∏—è–Ω–∏—è")
        print("   - –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("‚ö†Ô∏è  –ü–æ–º–Ω–∏—Ç–µ: —ç—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏–∏!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ sample.csv –∏ predictions_full.json")

if __name__ == "__main__":
    main() 